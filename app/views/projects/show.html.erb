<style>
  .tabs {
    display: flex;
    background-color: #f0f0f0;
    border-radius: 20px;
    padding: 5px;
    margin-bottom: 20px;
  }

  .tab-button {
    border: none;
    background: none;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 15px;
    transition: all 0.3s ease;
    font-weight: 500;
    color: #4a5568;
  }

  .tab-button.active {
    background-color: white;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }

  .tab-content {
    display: none;
    margin-top: 20px;

  }

  .tab-content.active {
    display: block;
  }

  .edit-button {
    display: inline-flex;
    align-items: center;
    background-color: #f0f0f0;
    border: 1px solid #d0d0d0;
    border-radius: 4px;
    padding: 6px 12px;
    text-decoration: none;
    color: #333;
    font-size: 14px;
  }

  .edit-icon {
    margin-right: 6px;
  }

  .edit-button:hover {
    background-color: #e0e0e0;
  }
  #phase-filter-form {
  display: flex;
  align-items: center;
  gap: 10px;
  }

  #phase-filter-form input,
  #phase-filter-form select {
  flex-grow: 1;
  }
</style>
<div class="w-full">
  <div class="project-header flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold mb-6"><%= @project.title %></h1>
    <div class="flex items-center">
      <%= link_to projects_path, class: "text-gray-600 hover:text-gray-800 mr-4" do %>
        <span>&#8592; Back</span>
      <% end %>
      <%= button_to "Delete", @project, method: :delete, class: "rounded-lg py-2 px-4 bg-red-500 font-medium", data: { confirm: "Are you sure you want to delete this project?" } %>
    </div>
  </div>
  <div class="container px-6 py-4 bg-white shadow overflow-hidden sm:rounded-lg mx-auto">
    <% if notice.present? %>
      <p class="py-2 px-3 bg-green-50 mb-5 text-green-500 font-medium rounded-lg inline-block" id="notice"><%= notice %></p>
    <% end %>
    <!-- Tabs -->
    <div class="tabs">
      <button class="tab-button <%= params[:tab] != 'phases' ? 'active' : '' %>" onclick="openTab(event, 'project-details', 'details')">Project Details</button>
      <button class="tab-button <%= params[:tab] == 'phases' ? 'active' : '' %>" onclick="openTab(event, 'phases', 'phases')">Phases</button>
    </div>
    <!-- Tab content -->
    <div id="project-details" class="tab-content active">
      <%= render @project %>
    </div>
    <div id="phases" class="tab-content">
      <div class="flex justify-between items-center my-4 space-x-4">
        <div class="phases-count">
          <h2 class="text-2xl font-semibold text-gray-800 flex-shrink-0">Phases</h2>
          <p class="phases-total-count">
            <%= @project.phases.count %> phases
            <span class="phases-total-filtered-count">
              (<%= @phases.count %> filtered)
            </span>
          </p>
        </div>
        <div class="flex-grow flex items-center space-x-4">
          <%= form_with url: project_path(@project), method: :get, local: false, class: "flex-grow flex items-center space-x-4", id: 'phase-filter-form' do |f| %>
            <%= f.text_field :search, placeholder: "Search phases...", class: "flex-grow rounded-lg py-2 px-4 bg-gray-100 text-gray-800", oninput: "searchPhases(this)" %>
            <%= f.select :phase_status, 
                 options_for_select([["All", ""]] + Phase.statuses.keys.map { |status| [status.humanize, status] }, params[:phase_status]), 
                 {}, 
                 { class: "rounded-lg py-2 px-4 bg-gray-100 text-gray-800", 
                   onchange: "submitPhaseFilter(this)" } %>
          <% end %>
        </div>
        <%# add new phase button %>
        <%= link_to "Add new phase", new_project_phase_path(@project), class: "rounded-lg py-2 px-4 bg-blue-500 inline-block font-medium flex-shrink-0" %>
      </div>
      <!-- Phases list -->
      <div id="phases-list" class="space-y-6">
        <%= render partial: "phases/phase", collection: @phases %>
      </div>
    </div>
  </div>
</div>
<script>
  function openTab(evt, tabName, tabParam) {
  var tabContents = document.getElementsByClassName("tab-content");
  var tabButtons = document.getElementsByClassName("tab-button");

  for (var i = 0; i < tabContents.length; i++) {
    tabContents[i].classList.remove("active");
  }

  for (var i = 0; i < tabButtons.length; i++) {
    tabButtons[i].classList.remove("active");
  }

  document.getElementById(tabName).classList.add("active");
  evt.currentTarget.classList.add("active");

  // Update URL with the active tab
  var url = new URL(window.location);
  url.searchParams.set('tab', tabParam);
  window.history.pushState({}, '', url);
  }

  function submitPhaseFilter(selectElement) {
  const form = selectElement.closest('form');
  const url = new URL(form.action);
  const formData = new FormData(form);

  url.search = new URLSearchParams(formData).toString();

  fetch(url, {
    method: 'GET',
    headers: {
      'Accept': 'application/javascript',
      'X-Requested-With': 'XMLHttpRequest'
    },
    credentials: 'same-origin'
  })
  .then(response => response.text())
  .then(html => {
    const phasesListContainer = document.getElementById('phases-list');
    phasesListContainer.innerHTML = html;

    // Update the filtered count
    const visiblePhases = phasesListContainer.querySelectorAll('div[data-phase-id]').length;
    document.querySelector('.phases-total-filtered-count').textContent = `(${visiblePhases} filtered)`;

    // Evaluate any scripts in the response
    if (document.querySelector('#phases-list script')) {
      eval(document.querySelector('#phases-list script').textContent);
    }
  })
  .catch(error => console.error('Error:', error));
  }

  function searchPhases(input) {
  const searchTerm = input.value.toLowerCase();
  const phases = document.querySelectorAll('#phases-list > div');
  let visibleCount = 0;

  phases.forEach(phase => {
    const text = phase.textContent.toLowerCase();
    if (text.includes(searchTerm)) {
      phase.style.display = '';
      visibleCount++;
    } else {
      phase.style.display = 'none';
    }
  });

  document.querySelector('.phases-total-filtered-count').textContent = `(${visibleCount} filtered)`;
  }
</script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var urlParams = new URLSearchParams(window.location.search);
    var activeTab = urlParams.get('tab') || 'details';
    var tabToOpen = activeTab === 'phases' ? 'phases' : 'project-details';
    var tabButton = document.querySelector(`.tab-button[onclick*="${tabToOpen}"]`);
    if (tabButton) {
      tabButton.click();
    }
  });
</script>
